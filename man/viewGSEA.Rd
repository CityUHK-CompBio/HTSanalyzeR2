% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsca_view.R
\docType{methods}
\name{viewGSEA,GSCA-method}
\alias{viewGSEA,GSCA-method}
\title{Plot a figure of GSEA results for one gene set}
\usage{
\S4method{viewGSEA}{GSCA}(object, gscName, gsName)
}
\arguments{
\item{object}{A GSCA object.}

\item{gscName}{A single character value specifying the name of the gene set collection where
the gene set is.}

\item{gsName}{A single character value specifying the name of the gene set to be plotted.}
}
\description{
This is a generic function. When implemented as the S4 method for objects of class GSCA,
 this function plots a figure
of the positions of the gene sets in the ranked gene list and the location of the enrichment score.
}
\details{
We suggest to print the names of top significant gene sets using the
function \code{\link[HTSanalyzeR2]{getTopGeneSets}} before plotting the GSEA results.
}
\examples{
library(org.Hs.eg.db)
library(GO.db)
library(KEGGREST)
## load data for enrichment analyses
data(d7)
phenotype <- as.vector(d7$neg.lfc)
names(phenotype) <- d7$id

## select hits if you also want to do GSOA, otherwise ignore it
hits <-  names(phenotype[which(abs(phenotype) > 2)])

## set up a list of gene set collections
GO_MF <- GOGeneSets(species="Hs", ontologies=c("MF"))
PW_KEGG <- KeggGeneSets(species="Hs")
ListGSC <- list(GO_MF=GO_MF, PW_KEGG=PW_KEGG)

## create an object of class 'GSCA'
gsca <- new("GSCA", listOfGeneSetCollections = ListGSC, geneList = phenotype, hits = hits)

## do preprocessing
gsca <- preprocess(gsca, species="Hs", initialIDs="SYMBOL", keepMultipleMappings=TRUE,
                   duplicateRemoverMethod="max", orderAbsValue=FALSE)

## support parallel calculation using doParallel package
doParallel::registerDoParallel(cores=4)

## do hypergeometric tests and GSEA
gsca <- analyze(gsca, para=list(pValueCutoff=0.05, pAdjustMethod ="BH",
                                nPermutations=100, minGeneSetSize=200, exponent=1),
                                doGSOA = TRUE, doGSEA = TRUE)

## summarize gsca
summarize(gsca)

## print top significant gene sets in GO_MF
topGS_GO_MF <- getTopGeneSets(gsca, "GSEA.results", gscs = "GO_MF", allSig=TRUE)

## view GSEA results for one gene set
viewGSEA(gsca, "GO_MF", topGS_GO_MF[["GO_MF"]][1])

}
