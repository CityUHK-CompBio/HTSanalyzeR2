% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsca_enrichmap.R
\docType{methods}
\name{appendGSTerms,GSCA-method}
\alias{appendGSTerms,GSCA-method}
\title{Append gene set terms to GSCA results}
\usage{
\S4method{appendGSTerms}{GSCA}(object, keggGSCs = NULL, goGSCs = NULL,
  msigdbGSCs = NULL)
}
\arguments{
\item{object}{A GSCA object.}

\item{keggGSCs}{A character vector of names of all KEGG gene set collections.}

\item{goGSCs}{A character vector of names of all GO gene set collections.}

\item{msigdbGSCs}{A character vector of names of all MSigDB gene set collections.}
}
\value{
In the end, this function will return an updated object of class GSCA.
}
\description{
This is a generic function.
When implemented as the S4 method for objects of class GSCA, this function
finds corresponding annotation terms for GO, KEGG and MSigDB gene sets and
inserts a column named "Gene.Set.Term" to each data frame in the GSCA results.
}
\details{
This function makes the GSCA results more readable by appending a
column of terms for KEGG and GO gene sets. To do this, the user needs to
specify the names of the gene set collections based on GO, KEGG and MSigDB respectively.

For each GO gene set, the GO id will be mapped to corresponding GO term by
the function mapIds of the package AnnotationDbi.

For each KEGG gene set, the species code in the KEGG id will be trimmed off,
and then mapped to its corresponding annotation term using the package KEGGREST.

For each MSigDB gene set, the corresponding annotation terms are based on the
built-in database in this package.
}
\examples{
library(org.Hs.eg.db)
library(GO.db)
library(KEGGREST)
## load data for enrichment analyses
data(d7)
phenotype <- as.vector(d7$neg.lfc)
names(phenotype) <- d7$id

## select hits if you also want to do GSOA, otherwise ignore it
hits <-  names(phenotype[which(abs(phenotype) > 2)])

## set up a list of gene set collections
GO_BP <- GOGeneSets(species="Hs", ontologies=c("BP"))
PW_KEGG <- KeggGeneSets(species="Hs")
ListGSC <- list(GO_BP=GO_BP, PW_KEGG=PW_KEGG)

## create an object of class 'GSCA'
gsca <- new("GSCA", listOfGeneSetCollections = ListGSC, geneList = phenotype, hits = hits)

## do preprocessing
gsca1 <- preprocess(gsca, species="Hs", initialIDs="SYMBOL", keepMultipleMappings=TRUE,
                   duplicateRemoverMethod="max", orderAbsValue=FALSE)

## support parallel calculation using doParallel package
doParallel::registerDoParallel(cores=4)

## do hypergeometric tests and GSEA
gsca2 <- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod ="BH",
                                nPermutations=100, minGeneSetSize=200, exponent=1),
                                doGSOA = TRUE, doGSEA = TRUE)

## summarize gsca2
summarize(gsca2)
head(gsca2@result$GSEA.results$GO_BP)

## append gene set terms to results
gsca3 <- appendGSTerms(gsca2, goGSCs=c("GO_BP"), keggGSCs=c("PW_KEGG"), msigdbGSCs=NULL)
head(gsca3@result$GSEA.results$GO_BP)

}
