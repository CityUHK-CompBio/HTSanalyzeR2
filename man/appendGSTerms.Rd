% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsca_enrichmap.R
\docType{methods}
\name{appendGSTerms,GSCA-method}
\alias{appendGSTerms,GSCA-method}
\title{Append gene set terms to GSCA results}
\usage{
\S4method{appendGSTerms}{GSCA}(object, keggGSCs = NULL, goGSCs = NULL,
  msigdbGSCs = NULL)
}
\arguments{
\item{object}{an object. When this function is implemented as the S4 method
of class 'GSCA', this argument is an object of class 'GSCA'.}

\item{keggGSCs}{a character vector of names of all KEGG gene set collections}

\item{goGSCs}{a character vector of names of all GO gene set collections}

\item{msigdbGSCs}{a character vector of names of all MSigDB gene set collections}
}
\value{
In the end, this function will return an updated object of class GSCA.
}
\description{
This is a generic function.
When implemented as the S4 method for objects of class GSCA, this function
finds corresponding annotation terms for GO, KEGG and MSigDB gene sets and
inserts a column named "Gene.Set.Term" to each data frame in the GSCA results.
}
\details{
This function makes the GSCA results more readable by appending a
column of terms for KEGG and GO gene sets. To do this, the user needs to
specify the names of the gene set collections based on GO, KEGG and MSigDB,
respectively.

For each GO gene set, the GO id will be mapped to corresponding GO term by
the function mapIds of the package AnnotationDbi.

For each KEGG gene set, the species code in the KEGG id will be trimmed off,
and then mapped to its corresponding annotation term using the package KEGGREST

For each MSigDB gene set, the corresponding annotation terms based on the
built-in database in this package.
}
\examples{
## Not run:
library(org.Dm.eg.db)
library(GO.db)
## load data for enrichment analyses
data(data4enrich)
## select hits
hits <- names(data4enrich)[abs(data4enrich) > 2]
## set up a list of gene set collections
GO_MF <- GOGeneSets(species="Dm", ontologies=c("MF"))
ListGSC <- list(GO_MF=GO_MF)
## create an object of class 'GSCA'
gsca <- GSCA(listOfGeneSetCollections = ListGSC, geneList = data4enrich, hits = hits)
## print gsca
gsca
## do preprocessing
gsca <- preprocess(gsca, species="Dm", initialIDs="FLYBASECG", keepMultipleMappings=TRUE, duplicateRemoverMethod="max", orderAbsValue=FALSE)
## do hypergeometric tests and GSEA
gsca <- analyze(gsca, para=list(pValueCutoff=0.05, pAdjustMethod ="BH", nPermutations=100, minGeneSetSize=200, exponent=1))
## append gene set terms to results
gsca <- appendGSTerms(gsca, goGSCs=c("GO_MF"), keggGSCs=NULL, msigdbGSCs=NULL)
## view an enrichment map for GSEA results
## print gsca again
gsca
}
