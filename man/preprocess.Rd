% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsca_preprocess.R, R/nwa_preprocess.R
\docType{methods}
\name{preprocess,GSCA-method}
\alias{preprocess,GSCA-method}
\alias{preprocess,NWA-method}
\title{A preprocessing method for objects of class GSCA or NWA}
\usage{
\S4method{preprocess}{GSCA}(object, species = "Hs", initialIDs = "SYMBOL",
  keepMultipleMappings = TRUE, duplicateRemoverMethod = "max",
  orderAbsValue = FALSE, verbose = TRUE)

\S4method{preprocess}{NWA}(object, species = "Hs",
  duplicateRemoverMethod = "max", initialIDs = "SYMBOL",
  keepMultipleMappings = TRUE, verbose = TRUE)
}
\arguments{
\item{object}{A GSCA object.}

\item{species}{A single character value specifying the species for which the
data should be read.}

\item{initialIDs}{A single character value specifying the type of initial
identifiers for input geneList}

\item{keepMultipleMappings}{A single logical value. If TRUE, the function
keeps the entries with multiple mappings (first mapping is kept). If FALSE,
the entries with multiple mappings will be discarded.}

\item{duplicateRemoverMethod}{A single character value specifying the method
to remove the duplicates. See duplicateRemover for details.}

\item{orderAbsValue}{A single logical value indicating whether the values
should be converted to absolute values and then ordered (if TRUE), or
ordered as they are (if FALSE).}

\item{verbose}{A single logical value specifying to display detailed messages
(when verbose=TRUE) or not (when verbose=FALSE)}
}
\value{
In the end, this function will return an updated object of class GSCA or NWA.
}
\description{
This is a generic function. When implemented as the S4 method for objects of
class GSCA or NWA, this function filters out invalid data, removes duplicated
genes, converts annotations to Entrez identifiers, etc.
}
\details{
This function will do the following preprocessing steps:

1:filter out p-values (the slot **pvalues** of class NWA), phenotypes
 (the slot phenotypes of class NWA) and data for enrichment (the slot
 geneList of class GSCA) with NA values or without valid names, and invalid
  gene names (the slot hits of class GSCA);

2:invoke function duplicateRemover to remove duplicated genes in the slot pvalues,
 phenotypes of class NWA, and the slot geneList and hits of class GSCA;

3:invoke function annotationConvertor to convert annotations from initialIDs
to Entrez identifiers. Please note that the slot hits and the names of the slot
geneList of class GSCA, the names of the slot pvalues and the names of the slot
phenotypes of class NWA must have the same type of gene annotation specified by
initialIDs;

4:order the data for enrichment decreasingly for objects of class GSCA.

See the function duplicateRemover for more details about how to remove
duplicated genes.

See the function annotationConvertor for more details about how to convert
annotations.
}
\examples{
# ===========================================================
# GSCA class
## Not run:
library(org.Dm.eg.db)
library(GO.db)
## load data for enrichment analyses
data(data4enrich)
## select hits
hits <- names(data4enrich)[abs(data4enrich) > 2]
## set up a list of gene set collections
GO_MF <- GOGeneSets(species="Dm", ontologies=c("MF"))
ListGSC <- list(GO_MF=GO_MF)
## create an object of class 'GSCA'
gsca <- GSCA(listOfGeneSetCollections = ListGSC, geneList = data4enrich, hits = hits)
## do preprocessing
gsca <- preprocess(gsca, species="Dm", initialIDs="FLYBASECG", keepMultipleMappings=TRUE, duplicateRemoverMethod="max", orderAbsValue=FALSE)
## print gsca
gsca
# ===========================================================
# NWA class

# loading the pre_selected sample data
data(xn)
data(data4enrich)
# Conducting one sample t-test & compute the p-values
test.stats <- cellHTS2OutputStatTests(cellHTSobject=xn,annotationColumn="GeneID", alternative="two.sided",tests=c("T-test"))
library(BioNet)
pvalues <- BioNet::aggrPvals(test.stats, order=2, plot=FALSE)
# Case1: Using the enrich vector
nwa <- NWA(pvalues=pvalues, phenotypes=data4enrich)
nwa <- preprocess(nwa, species="Dm", initialIDs="FLYBASECG", keepMultipleMappings=TRUE, duplicateRemoverMethod="max")
# Case2: Using the enrich matrix
# generate the simulated enrich matrix
colCount <- 10
data4enrichMat <- matrix(rep(data4enrich, colCount), length(data4enrich), colCount)
factor <- matrix(0, length(data4enrich), colCount)
factor[, 0] <- runif(length(data4enrich), 0, 0.4)
for(i in c(2:colCount)) factor[, i] <- factor[, i - 1] + runif(length(data4enrich), 0, 0.4)
factor[,colCount] <- 1
factor[factor > 1] <- 1
data4enrichMat <- data4enrichMat * factor
rownames(data4enrichMat) <- names(data4enrich)
colnames(data4enrichMat) <- paste0(c(1:colCount), "h")
nwam <- NWA(pvalues=pvalues, phenotypes=data4enrichMat)
nwam <- preprocess(nwam, species="Dm", initialIDs="FLYBASECG", keepMultipleMappings=TRUE, duplicateRemoverMethod="max")
}
\seealso{
\code{\link[HTSanalyzeR2]{duplicateRemover}}, \code{\link[HTSanalyzeR2]{annotationConvertor}}
}
