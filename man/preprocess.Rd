% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gsca_preprocess.R, R/nwa_preprocess.R
\docType{methods}
\name{preprocess,GSCA-method}
\alias{preprocess,GSCA-method}
\alias{preprocess}
\alias{preprocess,NWA-method}
\title{A preprocessing method for objects of class GSCA or NWA}
\usage{
\S4method{preprocess}{GSCA}(object, species = "Hs", initialIDs = "SYMBOL",
  keepMultipleMappings = TRUE, duplicateRemoverMethod = "max",
  orderAbsValue = FALSE, verbose = TRUE)

\S4method{preprocess}{NWA}(object, species = "Hs",
  duplicateRemoverMethod = "max", initialIDs = "SYMBOL",
  keepMultipleMappings = TRUE, verbose = TRUE)
}
\arguments{
\item{object}{A \code{\link[HTSanalyzeR2]{GSCA-class}} or \code{\link[HTSanalyzeR2]{NWA-class}} object.}

\item{species}{A single character value specifying the species of the input.
It supports all the species of OrgDb objects in AnnotationDbi.
The format should be an abbreviation of the organism as setted by AnnotationDbi.
For example, the commonly used ones are "Dm" ("Drosophila_melanogaster"),
"Hs" ("Homo_sapiens"), "Rn" ("Rattus_norvegicus"), "Mm" ("Mus_musculus"),
"Ce" ("Caenorhabditis_elegans"), and etc.}

\item{initialIDs}{A single character value specifying the type of
initial identifiers for input 'geneList'. The valid terms need match with
the keytypes of species db such as keytypes(org.Hs.eg.db).}

\item{keepMultipleMappings}{A single logical value. If TRUE, the function
keeps the entries with multiple mappings (first mapping is kept). If FALSE,
the entries with multiple mappings will be discarded.}

\item{duplicateRemoverMethod}{A single character value specifying the method
to remove the duplicates. See help(duplicateRemover) for details.}

\item{orderAbsValue}{A single logical value indicating whether the values
should be converted to absolute values and then ordered (if TRUE), or
ordered as they are (if FALSE). This argument is only for class \code{\link[HTSanalyzeR2]{GSCA-class}}.}

\item{verbose}{A single logical value specifying to display detailed messages
(when verbose=TRUE) or not (when verbose=FALSE).}
}
\value{
In the end, this function will return an updated object of class
\code{\link[HTSanalyzeR2]{GSCA-class}} or \code{\link[HTSanalyzeR2]{NWA-class}}.
}
\description{
This is a generic function. When implemented as the S4 method for objects of
class \code{\link[HTSanalyzeR2]{GSCA-class}} or \code{\link[HTSanalyzeR2]{NWA-class}},
this function filters out invalid data, removes duplicated
genes, converts annotations to Entrez identifiers, etc.
}
\details{
This function will do the following preprocessing steps:

1:filter out p-values (the slot \emph{pvalues} of class NWA), phenotypes
 (the slot \emph{phenotypes} of class NWA) and data for enrichment (the slot
 \emph{geneList} of class GSCA) with NA values or without valid names, and invalid
  gene names (the slot \emph{hits} of class GSCA);

2:invoke function duplicateRemover to remove duplicated genes in the slot \emph{pvalues},
 \emph{phenotypes} of class NWA, and the slot \emph{geneList} and \emph{hits} of class GSCA;

3:invoke function annotationConvertor to convert annotations from initialIDs
to Entrez identifiers. Please note that the slot \emph{hits} and the names of the slot
\emph{geneList} of class GSCA, the names of the slot \emph{pvalues} and the names of the slot
\emph{phenotypes} of class NWA must have the same type of gene annotation specified by
initialIDs;

4:order the data for enrichment decreasingly for objects of class GSCA.

See the function duplicateRemover for more details about how to remove
duplicated genes.

See the function annotationConvertor for more details about how to convert
annotations.
}
\examples{
# ===========================================================
# GSCA class
library(org.Hs.eg.db)
library(GO.db)
library(KEGGREST)
## load data for enrichment analyses
data(d7)
phenotype <- as.vector(d7$neg.lfc)
names(phenotype) <- d7$id

## select hits if you also want to do GSOA, otherwise ignore it
hits <-  names(phenotype[which(abs(phenotype) > 2)])

## set up a list of gene set collections
GO_MF <- GOGeneSets(species="Hs", ontologies=c("MF"))
PW_KEGG <- KeggGeneSets(species="Hs")
ListGSC <- list(GO_MF=GO_MF, PW_KEGG=PW_KEGG)

## create an object of class 'GSCA'
gsca <- new("GSCA", listOfGeneSetCollections = ListGSC, geneList = phenotype, hits = hits)

## do preprocessing
gsca1 <- preprocess(gsca, species="Hs", initialIDs="SYMBOL", keepMultipleMappings=TRUE,
                   duplicateRemoverMethod="max", orderAbsValue=FALSE)

## print gsca1
gsca1
\dontrun{
# ===========================================================
# NWA class
library(org.Hs.eg.db)
library(GO.db)
## load data for subnetwork analyses
data(d7)
pvalues <- d7$neg.p.value
names(pvalues) <- d7$id

## input phenotypes if you want to color nodes by it
phenotypes <- as.vector(d7$neg.lfc)
names(phenotypes) <- d7$id

## create an object of class 'NWA' with phenotypes
nwa <- new("NWA", pvalues=pvalues, phenotypes=phenotypes)

## do preprocessing
nwa1 <- preprocess(nwa, species="Hs", initialIDs="SYMBOL", keepMultipleMappings=TRUE,
                   duplicateRemoverMethod="max")
}
}
\seealso{
\code{\link[HTSanalyzeR2]{duplicateRemover}}, \code{\link[HTSanalyzeR2]{annotationConvertor}}
}
